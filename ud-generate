#!/usr/bin/env python
# -*- mode: python -*-
# Generates passwd, shadow and group files from the ldap directory.

#   Copyright (c) 2000-2001  Jason Gunthorpe <jgg@debian.org>
#   Copyright (c) 2003-2004  James Troup <troup@debian.org>
#   Copyright (c) 2004-2005,7  Joey Schulze <joey@infodrom.org>
#   Copyright (c) 2001-2007  Ryan Murray <rmurray@debian.org>
#   Copyright (c) 2008 Peter Palfrader <peter@palfrader.org>
#   Copyright (c) 2008 Andreas Barth <aba@not.so.argh.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

import string, re, time, ldap, getopt, sys, os, pwd, posix, socket, base64, sha, shutil
from userdir_ldap import *;

global Allowed;
global CurrentHost;

PasswdAttrs = None;
GroupIDMap = {};
Allowed = None;
CurrentHost = "";

EmailCheck = re.compile("^([^ <>@]+@[^ ,<>@]+)?$");
BSMTPCheck = re.compile(".*mx 0 (gluck)\.debian\.org\..*",re.DOTALL);
DNSZone = ".debian.net"
Keyrings = [ "/org/keyring.debian.org/keyrings/debian-keyring.gpg",
             "/org/keyring.debian.org/keyrings/debian-keyring.pgp" ]

def Sanitize(Str):
  return Str.translate(string.maketrans("\n\r\t","$$$"))

def DoLink(From,To,File):
   try: posix.remove(To+File);
   except: pass;
   posix.link(From+File,To+File);

# See if this user is in the group list
def IsInGroup(DnRecord):
  if Allowed == None:
     return 1;

  # See if the primary group is in the list
  if Allowed.has_key(GetAttr(DnRecord,"gidNumber")) != 0:
     return 1;

  # Check the host based ACL
  if DnRecord[1].has_key("allowedHost") != 0:
     for I in DnRecord[1]["allowedHost"]:
        if CurrentHost == I:
           return 1;

  # See if there are supplementary groups
  if DnRecord[1].has_key("supplementaryGid") == 0:
     return 0;

  # Check the supplementary groups
  for I in DnRecord[1]["supplementaryGid"]:
     if Allowed.has_key(I):
        return 1;
  return 0;

def Die(File,F,Fdb):
   if F != None:
      F.close();
   if Fdb != None:
      Fdb.close();
   try: os.remove(File + ".tmp");
   except: pass;
   try: os.remove(File + ".tdb.tmp");
   except: pass;

def Done(File,F,Fdb):
  if F != None:
    F.close();
    os.rename(File + ".tmp",File);
  if Fdb != None:
    Fdb.close();
    os.rename(File + ".tdb.tmp",File+".tdb");
  
# Generate the password list
def GenPasswd(l,File,HomePrefix,PwdMarker):
  F = None;
  try:
   F = open(File + ".tdb.tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   I = 0;
   for x in PasswdAttrs:
      if x[1].has_key("uidNumber") == 0 or IsInGroup(x) == 0:
         continue;

      # Do not let people try to buffer overflow some busted passwd parser.
      if len(GetAttr(x,"gecos")) > 100 or len(GetAttr(x,"loginShell")) > 50:
         continue;

      Line = "%s:%s:%s:%s:%s:%s%s:%s" % (GetAttr(x,"uid"),\
              PwdMarker,\
              GetAttr(x,"uidNumber"),GetAttr(x,"gidNumber"),\
              GetAttr(x,"gecos"),HomePrefix,GetAttr(x,"uid"),\
              GetAttr(x,"loginShell"));

      Line = Sanitize(Line) + "\n";
      F.write("0%u %s" % (I,Line));
      F.write(".%s %s" % (GetAttr(x,"uid"),Line));
      F.write("=%s %s" % (GetAttr(x,"uidNumber"),Line));
      I = I + 1;

  # Oops, something unspeakable happened.
  except:
   Die(File,None,F);
   raise;
  Done(File,None,F);

# Generate the shadow list
def GenShadow(l,File):
  F = None;
  try:
   OldMask = os.umask(0077);
   F = open(File + ".tdb.tmp","w",0600);
   os.umask(OldMask);

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   I = 0;
   for x in PasswdAttrs:
      if x[1].has_key("uidNumber") == 0 or IsInGroup(x) == 0:
         continue;
	 
      Pass = GetAttr(x,"userPassword");
      if Pass[0:7] != "{crypt}" or len(Pass) > 50:
         Pass = '*';
      else:
         Pass = Pass[7:];

      # If the account is locked, mark it as such in shadow
      # See Debian Bug #308229 for why we set it to 1 instead of 0
      if (GetAttr(x,"userPassword").find("*LK*") != -1) \
          or GetAttr(x,"userPassword").startswith("!"):
         ShadowExpire = '1'
      else:
         ShadowExpire = GetAttr(x,"shadowexpire")

      Line = "%s:%s:%s:%s:%s:%s:%s:%s:" % (GetAttr(x,"uid"),\
              Pass,GetAttr(x,"shadowLastChange"),\
              GetAttr(x,"shadowMin"),GetAttr(x,"shadowMax"),\
              GetAttr(x,"shadowWarning"),GetAttr(x,"shadowinactive"),\
              ShadowExpire);
      Line = Sanitize(Line) + "\n";
      F.write("0%u %s" % (I,Line));
      F.write(".%s %s" % (GetAttr(x,"uid"),Line));
      I = I + 1;

  # Oops, something unspeakable happened.
  except:
   Die(File,None,F);
   raise;
  Done(File,None,F);

# Generate the shadow list
def GenSSHShadow(l,File):
  F = None;
  try:
   OldMask = os.umask(0077);
   F = open(File + ".tmp","w",0600);
   os.umask(OldMask);

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   for x in PasswdAttrs:
      # If the account is locked, do not write it.
      # This is a partial stop-gap. The ssh also needs to change this
      # to ignore ~/.ssh/authorized* files.
      if (GetAttr(x,"userPassword").find("*LK*") != -1) \
             or GetAttr(x,"userPassword").startswith("!"):
         continue;

      if x[1].has_key("uidNumber") == 0 or \
         x[1].has_key("sshRSAAuthKey") == 0:
         continue;
      for I in x[1]["sshRSAAuthKey"]:
         User = GetAttr(x,"uid");
         Line = "%s: %s" %(User,I);
         Line = Sanitize(Line) + "\n";
         F.write(Line);
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the group list
def GenGroup(l,File):
  F = None;
  try:
   F = open(File + ".tdb.tmp","w");

   # Generate the GroupMap
   GroupMap = {};
   for x in GroupIDMap.keys():
      GroupMap[x] = [];
      
   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Sort them into a list of groups having a set of users
   for x in PasswdAttrs:
      if x[1].has_key("uidNumber") == 0 or IsInGroup(x) == 0:
         continue;
      if x[1].has_key("supplementaryGid") == 0:
         continue;
	 
      for I in x[1]["supplementaryGid"]:
         if GroupMap.has_key(I):
	    GroupMap[I].append(GetAttr(x,"uid"));
	 else:
            print "Group does not exist ",I,"but",GetAttr(x,"uid"),"is in it";
	    
   # Output the group file.
   J = 0;
   for x in GroupMap.keys():
      if GroupIDMap.has_key(x) == 0:
         continue;
      Line = "%s:x:%u:" % (x,GroupIDMap[x]);
      Comma = '';
      for I in GroupMap[x]:
        Line = Line + ("%s%s" % (Comma,I));
        Comma = ',';
      Line = Sanitize(Line) + "\n";
      F.write("0%u %s" % (J,Line));
      F.write(".%s %s" % (x,Line));
      F.write("=%u %s" % (GroupIDMap[x],Line));
      J = J + 1;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,None,F);
   raise;
  Done(File,None,F);

# Generate the email forwarding list
def GenForward(l,File):
  F = None;
  try:
   OldMask = os.umask(0022);
   F = open(File + ".tmp","w",0644);
   os.umask(OldMask);

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the email address for each user
   for x in PasswdAttrs:
      if x[1].has_key("emailForward") == 0 or IsInGroup(x) == 0:
         continue;
      
      # Do not allow people to try to buffer overflow busted parsers
      if len(GetAttr(x,"emailForward")) > 200:
         continue;

      # Check the forwarding address
      if EmailCheck.match(GetAttr(x,"emailForward")) == None:
         continue;
      Line = "%s: %s" % (GetAttr(x,"uid"),GetAttr(x,"emailForward"));
      Line = Sanitize(Line) + "\n";
      F.write(Line);
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

def GenAllForward(l,File):
  Fdb = None;
  try:
   OldMask = os.umask(0022);
   Fdb = os.popen("cdbmake %s %s.tmp"%(File,File),"w");
   os.umask(OldMask);

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the email address for each user
   for x in PasswdAttrs:
      if x[1].has_key("emailForward") == 0:
         continue;
      
      # Do not allow people to try to buffer overflow busted parsers
      Forward = GetAttr(x,"emailForward");
      if len(Forward) > 200:
         continue;

      # Check the forwarding address
      if EmailCheck.match(Forward) == None:
         continue;
	 
      User = GetAttr(x,"uid");
      Fdb.write("+%d,%d:%s->%s\n"%(len(User),len(Forward),User,Forward));
   Fdb.write("\n");
  # Oops, something unspeakable happened.
  except:
    Fdb.close();
    raise;
  if Fdb.close() != None:
    raise "cdbmake gave an error";

# Generate the anon XEarth marker file 
def GenMarkers(l,File):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the position for each user
   for x in PasswdAttrs:
      if x[1].has_key("latitude") == 0 or x[1].has_key("longitude") == 0:
         continue;	 
      try:
         Line = "%8s %8s \"\""%(DecDegree(GetAttr(x,"latitude"),1),DecDegree(GetAttr(x,"longitude"),1));
         Line = Sanitize(Line) + "\n";
         F.write(Line);
      except:
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the debian-private subscription list
def GenPrivate(l,File):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the position for each user
   for x in PasswdAttrs:
      if x[1].has_key("privateSub") == 0:
         continue;

      # If the account is locked, do not write it
      if (GetAttr(x,"userPassword").find("*LK*") != -1) \
             or GetAttr(x,"userPassword").startswith("!"):
         continue;

      # If the account has no PGP key, do not write it
      if x[1].has_key("keyFingerPrint") == 0:
         continue;

      # Must be in the Debian group (yuk, hard coded for now)
      if GetAttr(x,"gidNumber") != "800":
	 continue;

      try:
         Line = "%s"%(GetAttr(x,"privateSub"));
         Line = Sanitize(Line) + "\n";
         F.write(Line);
      except:
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate a list of locked accounts
def GenDisabledAccounts(l,File):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   I = 0;
   for x in PasswdAttrs:
      if x[1].has_key("uidNumber") == 0:
         continue;
	 
      Pass = GetAttr(x,"userPassword");
      Line = ""
      # *LK* is the reference value for a locked account
      # password starting with ! is also a locked account
      if Pass.find("*LK*") != -1 or Pass.startswith("!"):
	 # Format is <login>:<reason>
	 Line = "%s:%s" % (GetAttr(x,"uid"), "Account is locked")

      if Line != "":
	 F.write(Sanitize(Line) + "\n")

  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the list of local addresses that refuse all mail
def GenMailDisable(l,File):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   for x in PasswdAttrs:
      Reason = None
      
      # If the account is locked, disable incoming mail
      if (GetAttr(x,"userPassword").find("*LK*") != -1):
         if GetAttr(x,"uid") == "luther":
	    continue
	 else:
            Reason = "user account locked"
      else:
         if x[1].has_key("mailDisableMessage"):
            Reason = GetAttr(x,"mailDisableMessage")
         else:
            continue

      # Must be in the Debian group (yuk, hard coded for now)
      if GetAttr(x,"gidNumber") != "800":
	 continue;

      try:
         Line = "%s: %s"%(GetAttr(x,"uid"),Reason);
         Line = Sanitize(Line) + "\n";
         F.write(Line);
      except:
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate a list of uids that should have boolean affects applied
def GenMailBool(l,File,Key):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   for x in PasswdAttrs:
      Reason = None
      
      if x[1].has_key(Key) == 0:
         continue

      # Must be in the Debian group (yuk, hard coded for now)
      if GetAttr(x,"gidNumber") != "800":
	 continue

      if GetAttr(x,Key) != "TRUE":
         continue

      try:
         Line = "%s"%(GetAttr(x,"uid"));
         Line = Sanitize(Line) + "\n";
         F.write(Line);
      except:
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate a list of hosts for RBL or whitelist purposes.
def GenMailList(l,File,Key):
  F = None;
  try:
   F = open(File + ".tmp","w");

   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   for x in PasswdAttrs:
      Reason = None
      
      if x[1].has_key(Key) == 0:
         continue

      # Must be in the Debian group (yuk, hard coded for now)
      if GetAttr(x,"gidNumber") != "800":
	 continue

      try:
         found = 0
         Line = None
         for z in x[1][Key]:
             if Key == "mailWhitelist":
		 if re.match('^[-\w.]+(/[\d]+)?$',z) == None:
		     continue
	     else:
		 if re.match('^[-\w.]+$',z) == None:
		     continue
             if found == 0:
                 found = 1
                 Line = GetAttr(x,"uid")
             else:
                 Line += " "
             Line += ": " + z
             if Key == "mailRHSBL":
                 Line += "/$sender_address_domain"

         if Line != None:
             Line = Sanitize(Line) + "\n";
             F.write(Line);
      except:
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the DNS Zone file
def GenDNS(l,File,HomePrefix):
  F = None;
  try:
   F = open(File + ".tmp","w");
   
   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the zone file entry for each user
   for x in PasswdAttrs:
      if x[1].has_key("dnsZoneEntry") == 0:
         continue;

      # If the account has no PGP key, do not write it
      if x[1].has_key("keyFingerPrint") == 0:
         continue;
      try:
         F.write("; %s\n"%(EmailAddress(x)));
         for z in x[1]["dnsZoneEntry"]:
            Split = z.lower().split()
	    if Split[1].lower() == 'in':
               for y in range(0,len(Split)):
                  if Split[y] == "$":
                     Split[y] = "\n\t";
               Line = " ".join(Split) + "\n";
               F.write(Line);
	       
	       Host = Split[0] + DNSZone;
	       if BSMTPCheck.match(Line) != None:
		   F.write("; Has BSMTP\n");
			       
	       # Write some identification information
               if Split[2].lower() == "a":
   	          Line = "%s IN TXT \"%s\"\n"%(Split[0],EmailAddress(x));
                  for y in x[1]["keyFingerPrint"]:
  	             Line = Line + "%s IN TXT \"PGP %s\"\n"%(Split[0],FormatPGPKey(y));
                  F.write(Line);
	    else:
               Line = "; Err %s"%(str(Split));
               F.write(Line);

         F.write("\n");
      except:
	 F.write("; Errors\n");
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the DNS SSHFP records
def GenSSHFP(l,File,HomePrefix):
  F = None
  try:
   F = open(File + ".tmp","w")
   
   # Fetch all the hosts
   global HostAttrs
   if HostAttrs == None:
      raise "No Hosts"

   for x in HostAttrs:
      if x[1].has_key("hostname") == 0 or \
         x[1].has_key("sshRSAHostKey") == 0:
         continue
      Host = GetAttr(x,"hostname");
      Algorithm = None
      for I in x[1]["sshRSAHostKey"]:
         Split = I.split()
         if Split[0] == 'ssh-rsa':
            Algorithm = 1
         if Split[0] == 'ssh-dss':
            Algorithm = 2
         if Algorithm == None:
            continue
         Fingerprint = sha.new(base64.decodestring(Split[1])).hexdigest()
         Line = "%s. IN SSHFP %u 1 %s" % (Host,Algorithm,Fingerprint)
         Line = Sanitize(Line) + "\n"
         F.write(Line)
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None)
   raise;
  Done(File,F,None)

# Generate the BSMTP file
def GenBSMTP(l,File,HomePrefix):
  F = None;
  try:
   F = open(File + ".tmp","w");
   
   # Fetch all the users
   global PasswdAttrs;
   if PasswdAttrs == None:
      raise "No Users";

   # Write out the zone file entry for each user
   for x in PasswdAttrs:
      if x[1].has_key("dnsZoneEntry") == 0:
         continue;

      # If the account has no PGP key, do not write it
      if x[1].has_key("keyFingerPrint") == 0:
         continue;
      try:
         for z in x[1]["dnsZoneEntry"]:
            Split = z.lower().split()
	    if Split[1].lower() == 'in':
               for y in range(0,len(Split)):
                  if Split[y] == "$":
                     Split[y] = "\n\t";
               Line = " ".join(Split) + "\n";
	       
	       Host = Split[0] + DNSZone;
	       if BSMTPCheck.match(Line) != None:
		   F.write("%s: user=%s group=Debian file=%s%s/bsmtp/%s\n"%(Host,
 		               GetAttr(x,"uid"),HomePrefix,GetAttr(x,"uid"),Host));
			       
      except:
	 F.write("; Errors\n");
         pass;
      
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# cache IP adresses
HostToIPCache = {}
def HostToIP(Host):
    global HostToIPCache
    if not Host in HostToIPCache:
        IPAdressesT = None
        try:
            IPAdressesT = list(set([ (a[0],a[4][0]) for a in socket.getaddrinfo(Host, None)]))
        except socket.gaierror, (code):
            if code[0] != -2: raise
        IPAdresses = []
        for addr in IPAdressesT:
            if addr[0] == socket.AF_INET: IPAdresses += [addr[1], "::ffff:"+addr[1]]
            else: IPAdresses += [addr[1]]
        HostToIPCache[Host] = IPAdresses
    return HostToIPCache[Host]


# Generate the ssh known hosts file
def GenSSHKnown(l,File,mode=None):
  F = None;
  try:
   OldMask = os.umask(0022);
   F = open(File + ".tmp","w",0644);
   os.umask(OldMask);

   global HostAttrs
   if HostAttrs == None:
      raise "No Hosts";
   
   for x in HostAttrs:
      if x[1].has_key("hostname") == 0 or \
         x[1].has_key("sshRSAHostKey") == 0:
         continue;
      Host = GetAttr(x,"hostname");
      HostNames = [ Host ]
      SHost = Host.find(".")
      if SHost != None: HostNames += [Host[0:SHost]]

      for I in x[1]["sshRSAHostKey"]:
         if mode and mode == 'authorized_keys':
            #Line = 'command="rsync --server --sender -pr . /var/cache/userdir-ldap/hosts/%s",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,from="%s" %s' % (Host, ",".join(HNames + HostToIP(Host)), I)
            Line = 'command="rsync --server --sender -pr . /var/cache/userdir-ldap/hosts/%s",no-port-forwarding,no-X11-forwarding,no-agent-forwarding %s' % (Host,I)
         else:
            Line = "%s %s" %(",".join(HostNames + HostToIP(Host)), I);
         Line = Sanitize(Line) + "\n";
         F.write(Line);
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

# Generate the debianhosts file (list of all IP addresses)
def GenHosts(l,File):
  F = None;
  try:
   OldMask = os.umask(0022);
   F = open(File + ".tmp","w",0644);
   os.umask(OldMask);

   # Fetch all the hosts
   HostNames = l.search_s(HostBaseDn,ldap.SCOPE_ONELEVEL,"hostname=*",\
                ["hostname"]);
   
   if HostNames == None:
      raise "No Hosts";

   for x in HostNames:
      if x[1].has_key("hostname") == 0:
         continue;
      Host = GetAttr(x,"hostname");
      try:
        Addr = socket.gethostbyname(Host);
        F.write(Addr + "\n");
      except:
        pass
  # Oops, something unspeakable happened.
  except:
   Die(File,F,None);
   raise;
  Done(File,F,None);

def GenKeyrings(l,OutDir):
  for k in Keyrings:
    shutil.copy(k, OutDir)

# Connect to the ldap server
l = ldap.open(LDAPServer);
F = open(PassDir+"/pass-"+pwd.getpwuid(os.getuid())[0],"r");
Pass = F.readline().strip().split(" ")
F.close();
l.simple_bind_s("uid="+Pass[0]+","+BaseDn,Pass[1]);

# Fetch all the groups
GroupIDMap = {};
Attrs = l.search_s(BaseDn,ldap.SCOPE_ONELEVEL,"gid=*",\
                  ["gid","gidNumber"]);

# Generate the GroupMap and GroupIDMap
for x in Attrs:
   if x[1].has_key("gidNumber") == 0:
      continue;
   GroupIDMap[x[1]["gid"][0]] = int(x[1]["gidNumber"][0]);

# Fetch all the users
PasswdAttrs = l.search_s(BaseDn,ldap.SCOPE_ONELEVEL,"uid=*",\
                ["uid","uidNumber","gidNumber","supplementaryGid",\
                 "gecos","loginShell","userPassword","shadowLastChange",\
                 "shadowMin","shadowMax","shadowWarning","shadowinactive",
	         "shadowexpire","emailForward","latitude","longitude",\
                 "allowedHost","sshRSAAuthKey","dnsZoneEntry","cn","sn",\
	         "keyFingerPrint","privateSub","mailDisableMessage",\
                 "mailGreylisting","mailCallout","mailRBL","mailRHSBL",\
                 "mailWhitelist"]);
# Fetch all the hosts
HostAttrs    = l.search_s(HostBaseDn,ldap.SCOPE_ONELEVEL,"sshRSAHostKey=*",\
                ["hostname","sshRSAHostKey"]);

# Open the control file
if len(sys.argv) == 1:
   F = open(GenerateConf,"r");
else:
   F = open(sys.argv[1],"r")

# Generate global things
GlobalDir = GenerateDir+"/";
GenSSHShadow(l,GlobalDir+"ssh-rsa-shadow");
GenAllForward(l,GlobalDir+"mail-forward.cdb");
GenMarkers(l,GlobalDir+"markers");
GenPrivate(l,GlobalDir+"debian-private");
GenDisabledAccounts(l,GlobalDir+"disabled-accounts");
GenSSHKnown(l,GlobalDir+"ssh_known_hosts");
#GenSSHKnown(l,GlobalDir+"authorized_keys", 'authorized_keys');
GenHosts(l,GlobalDir+"debianhosts");
GenMailDisable(l,GlobalDir+"mail-disable");
GenMailBool(l,GlobalDir+"mail-greylist","mailGreylisting");
GenMailBool(l,GlobalDir+"mail-callout","mailCallout");
GenMailList(l,GlobalDir+"mail-rbl","mailRBL");
GenMailList(l,GlobalDir+"mail-rhsbl","mailRHSBL");
GenMailList(l,GlobalDir+"mail-whitelist","mailWhitelist");
GenKeyrings(l,GlobalDir);

# Compatibility.
GenForward(l,GlobalDir+"forward-alias");

while(1):
   Line = F.readline();
   if Line == "":
      break;
   Line = Line.strip()
   if Line == "":
      continue;
   if Line[0] == '#':
      continue;

   Split = Line.split(" ")
   OutDir = GenerateDir + '/' + Split[0] + '/';
   try: os.mkdir(OutDir);
   except: pass;

   # Get the group list and convert any named groups to numerics
   GroupList = {};
   ExtraList = {};
   for I in Split[2:]:
      if I[0] == '[':
         ExtraList[I] = None;
         continue;
      GroupList[I] = None;
      if GroupIDMap.has_key(I):
         GroupList[str(GroupIDMap[I])] = None;

   Allowed = GroupList;
   if Allowed == {}:
     Allowed = None
   CurrentHost = Split[0];

   DoLink(GlobalDir,OutDir,"ssh-rsa-shadow");
   DoLink(GlobalDir,OutDir,"debianhosts");
   DoLink(GlobalDir,OutDir,"ssh_known_hosts");
   DoLink(GlobalDir,OutDir,"disabled-accounts")

   sys.stdout.flush();
   if ExtraList.has_key("[NOPASSWD]"):
      GenPasswd(l,OutDir+"passwd",Split[1], "*");
   else:
      GenPasswd(l,OutDir+"passwd",Split[1], "x");
   sys.stdout.flush();
   GenGroup(l,OutDir+"group");
   if ExtraList.has_key("[UNTRUSTED]"):
	continue;
   if not ExtraList.has_key("[NOPASSWD]"):
     GenShadow(l,OutDir+"shadow");
	
   # Link in global things   
   DoLink(GlobalDir,OutDir,"markers");
   DoLink(GlobalDir,OutDir,"mail-forward.cdb");
   DoLink(GlobalDir,OutDir,"mail-disable");
   DoLink(GlobalDir,OutDir,"mail-greylist");
   DoLink(GlobalDir,OutDir,"mail-callout");
   DoLink(GlobalDir,OutDir,"mail-rbl");
   DoLink(GlobalDir,OutDir,"mail-rhsbl");
   DoLink(GlobalDir,OutDir,"mail-whitelist");

   # Compatibility.
   DoLink(GlobalDir,OutDir,"forward-alias");

   if ExtraList.has_key("[DNS]"):
      GenDNS(l,OutDir+"dns-zone",Split[1]);
      GenSSHFP(l,OutDir+"dns-sshfp",Split[1])
      
   if ExtraList.has_key("[BSMTP]"):
      GenBSMTP(l,OutDir+"bsmtp",Split[1])

   if ExtraList.has_key("[PRIVATE]"):
      DoLink(GlobalDir,OutDir,"debian-private")

   if ExtraList.has_key("[KEYRING]"):
      for k in Keyrings:
        DoLink(GlobalDir,OutDir,os.path.basename(k))
   else:
     for k in Keyrings:
       try: posix.remove(OutDir+os.path.basename(k));
       except: pass;
